{
  "compilerOptions": {
    // Type checking options
    "allowUnreachableCode": false, // Report errors on unreachable code
    "allowUnusedLabels": false, // Report errors on unused labels
    "alwaysStrict": true, // Parse in strict mode and emit "use strict" for each source file
    "exactOptionalPropertyTypes": false, // Disable type widening of optional properties
    "noFallthroughCasesInSwitch": false, // Report errors for fallthrough cases in switch statements
    "noImplicitAny": false, // Raise error on expressions and declarations with an implied 'any' type
    "noImplicitOverride": true, // Ensure overriding members are marked with override modifier
    "noImplicitReturns": true, // Report error when not all code paths in function return a value
    "noImplicitThis": true, // Raise error on 'this' expressions with an implied 'any' type
    "noPropertyAccessFromIndexSignature": false, // Require undeclared properties from index signatures to use bracket notation
    "noUncheckedIndexedAccess": false, // Include undefined in index signature results
    "noUnusedLocals": true, // Report errors on unused local variables
    "noUnusedParameters": true, // Report errors on unused parameters
    "strict": true, // Enable all strict type-checking options
    "strictBindCallApply": true, // Check that the arguments for bind, call, and apply methods match the original function
    "strictBuiltinIteratorReturn": true, // Verify return values from built-in Array iterators
    "strictFunctionTypes": true, // Enable stricter checking of function types
    "strictNullChecks": true, // When type checking, consider null and undefined
    "strictPropertyInitialization": true, // Ensure non-undefined class properties are initialized in the constructor
    "useUnknownInCatchVariables": true, // Type catch clause variables as 'unknown' instead of 'any'

    // Module options
    "allowArbitraryExtensions": true, // Allow imports with arbitrary file extensions
    "allowImportingTsExtensions": false, // Allow imports to include TypeScript file extensions
    "allowUmdGlobalAccess": false, // Allow accessing UMD globals from modules
    "baseUrl": "./", // Base directory to resolve non-relative module names
    // "customConditions": [], // Custom conditions for resolving imports in package.json
    "module": "ESNext", // Specify module code generation
    "moduleResolution": "bundler", // Specify module resolution strategy
    // "moduleSuffixes": [], // List of file name suffixes to search when resolving a module
    "noResolve": false, // Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project
    "noUncheckedSideEffectImports": false, // Prevents non-value imports and exports from being removed
    // "paths": [], // List of path mappings for module names to locations relative to baseUrl
    "resolveJsonModule": true, // Include modules imported with .json extension
    "resolvePackageJsonExports": true, // Use the exports field in package.json when resolving package imports
    "resolvePackageJsonImports": true, // Use the imports field in package.json when resolving imports
    "rewriteRelativeImportExtensions": true, // Update relative imports to include file extensions
    // "rootDir": "./src", // Specify the root directory of input files
    // "rootDirs": [], // List of root folders whose combined content represents the structure of the project at runtime
    // "typeRoots": [], // List of folders to include type definitions from
    // "types": [], // Type declaration files to be included in compilation

    // Emit options
    "declaration": true, // Generate .d.ts files from TypeScript and JavaScript files
    // "declarationDir": "./dist", // Output directory for generated declaration files
    "declarationMap": true, // Generate sourcemaps for d.ts files
    "downlevelIteration": false, // Emit more compliant, but verbose and less performant JavaScript for iteration
    "emitBOM": false, // Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files
    "emitDeclarationOnly": false, // Only emit .d.ts declaration files
    "importHelpers": false, // Import emit helpers (e.g. __extends, __rest, etc..) from tslib
    "inlineSourceMap": false, // Include sourcemap files inside the emitted JavaScript
    "inlineSources": false, // Include source code in the sourcemaps inside the emitted JavaScript
    "mapRoot": "", // Specify the location where debugger should locate map files instead of generated locations
    "newLine": "LF", // Specify the end of line sequence to be used when emitting files
    "noEmit": false, // Do not emit outputs
    "noEmitHelpers": false, // Do not generate custom helper functions like __extends in compiled output
    "noEmitOnError": false, // Do not emit outputs if any errors were reported
    "outDir": "./dist", // Redirect output structure to the directory
    // "outFile": "", // Concatenate and emit output to single file
    "preserveConstEnums": true, // Do not erase const enum declarations in generated code
    "removeComments": false, // Do not emit comments to output
    "sourceMap": true, // Generate corresponding .map file
    // "sourceRoot": "./src", // Specify the location where debugger should locate TypeScript files instead of source locations
    "stripInternal": true, // Do not emit declarations for code with @internal JSDoc annotation

    // JavaScript Support options
    "allowJs": false, // Allow JavaScript files to be a part of your program
    "checkJs": false, // Report errors in .js files
    "maxNodeModuleJsDepth": 0, // Maximum dependency depth to search under node_modules for JavaScript files

    // Editor options
    "disableSizeLimit": false, // Remove the 20MB cap on total source code size for JavaScript files in the TypeScript language server
    // "plugins": [], // List of language service plugins to run

    // Interop constraints
    "allowSyntheticDefaultImports": true, // Allow default imports from modules with no default export
    // "erasableSyntaxOnly": false, // Disallow using syntax constructs that can be erased by TypeScript during emit
    "esModuleInterop": true, // Emit additional JavaScript to ease support for importing CommonJS modules
    "forceConsistentCasingInFileNames": true, // Ensure imports point to files/modules with correct casing
    "isolatedDeclarations": false, // Ensure output declaration files don't depend on other declaration files
    "isolatedModules": true, // Ensure each file can be safely transpiled without relying on other imports
    "preserveSymlinks": false, // Do not resolve the real path of symlinks
    "verbatimModuleSyntax": false, // Do not transform or elide any imports or exports not marked as type-only

    // Backwards compatibility options
    // "importsNotUsedAsValues": "error", // Specify emit behavior for imports that are only used for types
    // "keyofStringsOnly": false, // Resolve 'keyof' to string valued property names only
    // "noImplicitUseStrict": false, // Do not emit 'use strict' directives in module output
    // "noStrictGenericChecks": false, // Disable strict checking of generic signatures in function types
    // "out": "./dist", // Deprecated: Use outFile instead
    // "preserveValueImports": false, // Preserve unused imported values that are potentially side-effectful
    // "suppressExcessPropertyErrors": false, // Suppress excess property checks for object literals
    // "suppressImplicitAnyIndexErrors": false, // Suppress implicit any errors for indexing objects lacking index signatures

    // Language and environment options
    "emitDecoratorMetadata": true, // Emit design-type metadata for decorated declarations in source files
    "experimentalDecorators": true, // Enable experimental support for decorators
    // "jsx": "react", // Specify JSX code generation
    // "jsxFactory": "React.createElement", // Specify the JSX factory function to use
    // "jsxFragmentFactory": "React.Fragment", // Specify the JSX Fragment reference to use
    // "jsxImportSource": "react", // Specify module specifier used to import JSX factory functions
    "lib": ["esnext"], // Specify library files to be included in the compilation
    // "libReplacement": [], // Replaces TypeScript's built-in library type declarations with the specified ones
    "moduleDetection": "auto", // Control what method is used to detect module-format JS files
    "noLib": false, // Do not include any library files, including the default lib.d.ts
    // "reactNamespace": "React", // Specify the object invoked for createElement. This only applies when targeting react JSX emit
    "target": "ESNext", // Specify ECMAScript target version
    "useDefineForClassFields": true, // Emit ECMAScript-standard-compliant class fields

    // Compiler diagnostics
    "diagnostics": false, // Show diagnostic information
    "explainFiles": false, // Print files read during the compilation
    "extendedDiagnostics": false, // Show verbose diagnostic information
    // "generateCpuProfile": "", // Emit CPU profile for compiler activity
    // "generateTrace": "", // Generate Trace for debugging TypeScript's compiler behavior
    "listEmittedFiles": false, // Print names of generated files part of the compilation
    "listFiles": false, // Print names of files part of the compilation
    "noCheck": false, // Skip type checking
    "traceResolution": false, // Log module resolution

    // Project options
    "composite": false, // Enable constraints that allow a TypeScript project to be used with project references
    "disableReferencedProjectLoad": false, // Disable loading referenced projects
    "disableSolutionSearching": false, // Opt a project out of multi-project reference checking
    "disableSourceOfProjectReferenceRedirect": false, // Disable preferring source files instead of declaration files
    "incremental": true, // Enable incremental compilation
    // "tsBuildInfoFile": "./tsconfig.tsbuildinfo", // Specify file to store incremental compilation information

    // Output formatting
    "noErrorTruncation": true, // Do not truncate error messages
    "preserveWatchOutput": false, // Keep outdated console output in watch mode
    "pretty": true, // Stylize errors and messages using color and context

    // Completeness
    "skipDefaultLibCheck": false, // Skip type checking of default library declaration files
    "skipLibCheck": false, // Skip type checking of declaration files

    // Watch options
    "assumeChangesOnlyAffectDirectDependencies": false // Assume changes within a file will only affect files that directly depend on it
  }
  // "exclude": [],
  // "include": [],
  // "files": [], // Specifies an allowlist of files to include in the program
  // "references": [], // Specifies project references for improved build times and cross-project type checking
  // "watchOptions": {} // Configure file watching behavior for TypeScript's --watch mode
}
